openapi: 3.0.3
info:
  title: Todo API
  description: A simple API for managing todo items
  version: 1.0.0
  contact:
    name: API Support
    email: support@todoapi.com
servers:
  - url: https://api.todoapi.com/v1
    description: Production server
  - url: https://dev-api.todoapi.com/v1
    description: Development server
tags:
  - name: todos
    description: Operations about todos
  - name: lists
    description: Operations about todo lists
  - name: users
    description: Operations about users
paths:
  /todos:
    get:
      tags:
        - todos
      summary: Get all todos
      description: Returns all todos for the authenticated user
      operationId: listTodos
      parameters:
        - name: completed
          in: query
          description: Filter by completion status
          required: false
          schema:
            type: boolean
        - name: list_id
          in: query
          description: Filter by list ID
          required: false
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          description: Maximum number of todos to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: cursor
          in: query
          description: Cursor for pagination
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A paginated list of todos
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Todo'
                  next_cursor:
                    type: string
                    nullable: true
                  has_more:
                    type: boolean
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
        - bearerAuth: []
    post:
      tags:
        - todos
      summary: Create a new todo
      description: Creates a new todo for the authenticated user
      operationId: createTodo
      requestBody:
        description: Todo to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoInput'
      responses:
        '201':
          description: Todo created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
        - bearerAuth: []
  /todos/{todoId}:
    get:
      tags:
        - todos
      summary: Get a specific todo
      description: Returns a specific todo by ID
      operationId: getTodo
      parameters:
        - name: todoId
          in: path
          description: ID of the todo
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Todo found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
    put:
      tags:
        - todos
      summary: Update a todo
      description: Updates a specific todo
      operationId: updateTodo
      parameters:
        - name: todoId
          in: path
          description: ID of the todo
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Todo data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoInput'
      responses:
        '200':
          description: Todo updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
    delete:
      tags:
        - todos
      summary: Delete a todo
      description: Deletes a specific todo
      operationId: deleteTodo
      parameters:
        - name: todoId
          in: path
          description: ID of the todo
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Todo deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /lists:
    get:
      tags:
        - lists
      summary: Get all todo lists
      description: Returns all todo lists for the authenticated user
      operationId: listTodoLists
      parameters:
        - name: limit
          in: query
          description: Maximum number of lists to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: cursor
          in: query
          description: Cursor for pagination
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A paginated list of todo lists
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TodoList'
                  next_cursor:
                    type: string
                    nullable: true
                  has_more:
                    type: boolean
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
        - bearerAuth: []
    post:
      tags:
        - lists
      summary: Create a new todo list
      description: Creates a new todo list for the authenticated user
      operationId: createTodoList
      requestBody:
        description: Todo list to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoListInput'
      responses:
        '201':
          description: Todo list created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoList'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
        - bearerAuth: []
  /lists/{listId}:
    get:
      tags:
        - lists
      summary: Get a specific todo list
      description: Returns a specific todo list by ID
      operationId: getTodoList
      parameters:
        - name: listId
          in: path
          description: ID of the todo list
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Todo list found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoList'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
    put:
      tags:
        - lists
      summary: Update a todo list
      description: Updates a specific todo list
      operationId: updateTodoList
      parameters:
        - name: listId
          in: path
          description: ID of the todo list
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Todo list data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoListInput'
      responses:
        '200':
          description: Todo list updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoList'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
    delete:
      tags:
        - lists
      summary: Delete a todo list
      description: Deletes a specific todo list and all its todos
      operationId: deleteTodoList
      parameters:
        - name: listId
          in: path
          description: ID of the todo list
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Todo list deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - bearerAuth: []
  /user:
    get:
      tags:
        - users
      summary: Get current user
      description: Returns the current authenticated user
      operationId: getCurrentUser
      responses:
        '200':
          description: Current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
        - bearerAuth: []
components:
  schemas:
    Todo:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the todo
        title:
          type: string
          description: Title of the todo
        description:
          type: string
          nullable: true
          description: Detailed description of the todo
        completed:
          type: boolean
          description: Whether the todo is completed
        due_date:
          type: string
          format: date-time
          nullable: true
          description: When the todo is due
        list_id:
          type: string
          format: uuid
          nullable: true
          description: ID of the list this todo belongs to
        created_at:
          type: string
          format: date-time
          description: When the todo was created
        updated_at:
          type: string
          format: date-time
          description: When the todo was last updated
      required:
        - id
        - title
        - completed
        - created_at
        - updated_at
    TodoInput:
      type: object
      properties:
        title:
          type: string
          description: Title of the todo
        description:
          type: string
          nullable: true
          description: Detailed description of the todo
        completed:
          type: boolean
          description: Whether the todo is completed
        due_date:
          type: string
          format: date-time
          nullable: true
          description: When the todo is due
        list_id:
          type: string
          format: uuid
          nullable: true
          description: ID of the list this todo belongs to
      required:
        - title
    TodoList:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the todo list
        name:
          type: string
          description: Name of the todo list
        description:
          type: string
          nullable: true
          description: Description of the todo list
        color:
          type: string
          nullable: true
          description: Color code for the todo list
        todo_count:
          type: integer
          description: Number of todos in this list
        created_at:
          type: string
          format: date-time
          description: When the todo list was created
        updated_at:
          type: string
          format: date-time
          description: When the todo list was last updated
      required:
        - id
        - name
        - todo_count
        - created_at
        - updated_at
    TodoListInput:
      type: object
      properties:
        name:
          type: string
          description: Name of the todo list
        description:
          type: string
          nullable: true
          description: Description of the todo list
        color:
          type: string
          nullable: true
          description: Color code for the todo list
      required:
        - name
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the user
        email:
          type: string
          format: email
          description: Email address of the user
        name:
          type: string
          description: Full name of the user
        created_at:
          type: string
          format: date-time
          description: When the user was created
      required:
        - id
        - email
        - name
        - created_at
    Error:
      type: object
      properties:
        code:
          type: string
          description: Error code
        message:
          type: string
          description: Error message
        details:
          type: object
          nullable: true
          description: Additional error details
      required:
        - code
        - message
  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT